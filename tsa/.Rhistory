acf(Z, lag.max = 10, main = "모형7 ACF")
pacf(Z, lag.max = 10, main = "모형7 PACF")
set.seed(7714)
n = 100
phi = c(1.5, -0.7)
theta = c(-0.5)
mu = 100
z = arima.sim(n = n, model = list(order = c(2,0,1), ar = phi, ma = theta), rand.gen = rnorm)
Z = mu + z
## (a)
ts.plot(Z)
## (b)
dl_Z = durbin_levinson(Z, K = 10)
acf(Z, lag.max = 10, main = "모형8 ACF")
pacf(Z, lag.max = 10, main = "모형8 PACF")
## (c)
### 나중에
## (d)
set.seed(7714)
n = 1000
phi = c(1.5, -0.7)
theta = c(-0.5)
mu = 100
z = arima.sim(n = n, model = list(order = c(2,0,1), ar = phi, ma = theta), rand.gen = rnorm)
Z = mu + z
Z = ts(Z)
ts.plot(Z)
dl_Z = durbin_levinson(Z_t, K = 10)
acf(Z, lag.max = 10, main = "모형8 ACF")
pacf(Z, lag.max = 10, main = "모형8 PACF")
knitr::opts_chunk$set(echo = TRUE)
library(glue)
list.files("../adv_reg/functions")
dir = getwd() ; mother_dir = dirname(dir)
dataset_dir = glue(dir, "/datasets", sep = "")
reg_function_dir = glue(mother_dir, "/adv_reg/functions")
source(glue(reg_function_dir, "/mult_reg.R", sep = ""), echo = F)
source(glue(reg_function_dir, "/reg_diagnostics.R", sep = ""), echo = F)
tsa_function_dir = glue(mother_dir, "/tsa/functions")
source(glue(tsa_function_dir, "/exp_smt.R", sep = ""), echo = F)
source(glue(tsa_function_dir, "/acf_pacf.R", sep = ""), echo = F)
## Figure 6.1, Figure 6.2, Figure 6.3 : AR(1) 과정의 시계열자료 그림 phi = 0.5 & -0.5
library(astsa) # library for function lag1.plot
set.seed(1234)
z = arima.sim(n = 100, model = list(order = c(1,0,0), ar = 0.5), rand.gen = rnorm)
y = arima.sim(n = 100, model = list(order = c(1,0,0), ar = -0.5), rand.gen = rnorm)
# 그림 6-1
ts.plot(z, ylab = "Z(t)", main = (expression(AR(1)~~phi==0.5))) ; abline(h = 0)
# 그림 6-2
ts.plot(y, ylab = "Z(t)", main = (expression(AR(1)~~phi==-0.5))) ; abline(h = 0)
# 그림 6-3
lag1.plot(z,1)
## Figure 6.6, Figure 6.7 : MA(1) 과정의 시계열자료 그림 \theta = 0.6 & -0.6
# MA 모수의 부호가 교재와는 반대임에 유의
set.seed(12347)
z = arima.sim(n=100, list(order = c(0,0,1), ma = -0.6), rand.gen = rnorm)
y = arima.sim(n=100, list(order = c(0,0,1), ma = 0.6), rand.gen = rnorm)
# 그림 6-6
ts.plot(z, ylab = "z", main = (expression(MA(1)~~~theta==0.6))) ; abline(h = 0)
# 그림 6-7
ts.plot(y, ylab = "y", main = (expression(MA(1)~~~theta==-0.6))) ; abline(h = 0)
set.seed(7714)
n = 100 ; phi = 0.8 ; mu = 0
e_t = rnorm(n, 0, 1) ; Z_t = c(rep(1.0, n))
for (i in 1:n){
if (i == 1){
Z_t[i] = phi * mu + e_t[i]
}else{
Z_t[i] = (phi * Z_t[i-1]) + e_t[i]
}
}
Z_t = ts(Z_t)
## (a)
ts.plot(Z_t)
## (b)
dl_Z_t = durbin_levinson(Z_t, K = 10)
acf(Z_t, lag.max = 10, main = "모형1 ACF")
pacf(Z_t, lag.max = 10, main = "모형1 PACF")
## (c)
### 나중에
## (d)
set.seed(7714)
n = 1000 ; phi = 0.8 ; mu = 0
e_t = rnorm(n, 0, 1) ; Z_t = c(rep(1.0, n))
for (i in 1:n){
if (i == 1){
Z_t[i] = phi * mu + e_t[i]
}else{
Z_t[i] = (phi * Z_t[i-1]) + e_t[i]
}
}
Z_t = ts(Z_t)
ts.plot(Z_t)
dl_Z_t = durbin_levinson(Z_t, K = 10)
acf(Z_t, lag.max = 10, main = "모형1 ACF")
pacf(Z_t, lag.max = 10, main = "모형1 PACF")
set.seed(7714)
n = 100 ; phi = 0.5 ; mu = 100/1.5
e_t = rnorm(n, 0, 1) ; Z_t = c(rep(1.0, n))
for (i in 1:n){
if (i == 1){
Z_t[i] = 100 + phi * mu + e_t[i]
}else{
Z_t[i] = 100 + (phi * Z_t[i-1]) + e_t[i]
}
}
Z_t = ts(Z_t)
## (a)
ts.plot(Z_t)
## (b)
dl_Z_t = durbin_levinson(Z_t, K = 10)
acf(Z_t, lag.max = 10, main = "모형2 ACF")
pacf(Z_t, lag.max = 10, main = "모형2 PACF")
## (c)
### 나중에
## (d)
set.seed(7714)
n = 1000 ; phi = 0.5 ; mu = 100/1.5
e_t = rnorm(n, 0, 1) ; Z_t = c(rep(1.0, n))
for (i in 1:n){
if (i == 1){
Z_t[i] = 100 + phi * mu + e_t[i]
}else{
Z_t[i] = 100 + (phi * Z_t[i-1]) + e_t[i]
}
}
Z_t = ts(Z_t)
ts.plot(Z_t)
dl_Z_t = durbin_levinson(Z_t, K = 10)
acf(Z_t, lag.max = 10, main = "모형2 ACF")
pacf(Z_t, lag.max = 10, main = "모형2 PACF")
set.seed(7714)
n = 100 ; theta = 0.7 ; mu = 0
e_t = rnorm(n, 0, 1) ; Z_t = c(rep(1.0, n)) ; e_0 = rnorm(1, 0, 1)
for (i in 1:n){
if (i == 1){
Z_t[i] = e_t[i] + theta * e_0
}else{
Z_t[i] = e_t[i] + theta * e_t[i-1]
}
}
Z_t = ts(Z_t)
## (a)
ts.plot(Z_t)
## (b)
dl_Z_t = durbin_levinson(Z_t, K = 10)
acf(Z_t, lag.max = 10, main = "모형3 ACF")
pacf(Z_t, lag.max = 10, main = "모형3 PACF")
## (c)
### 나중에
## (d)
set.seed(7714)
n = 1000 ; theta = 0.7 ; mu = 0
e_t = rnorm(n, 0, 1) ; Z_t = c(rep(1.0, n)) ; e_0 = rnorm(1, 0, 1)
for (i in 1:n){
if (i == 1){
Z_t[i] = e_t[i] + theta * e_0
}else{
Z_t[i] = e_t[i] + theta * e_t[i-1]
}
}
Z_t = ts(Z_t)
ts.plot(Z_t)
dl_Z_t = durbin_levinson(Z_t, K = 10)
acf(Z_t, lag.max = 10, main = "모형3 ACF")
pacf(Z_t, lag.max = 10, main = "모형3 PACF")
set.seed(7714)
n = 100 ; theta1 = -1.3 ; theta2 = 0.6 mu = 9.5
e_t = rnorm(n, 0, 1) ; Z_t = c(rep(1.0, n)) ; e_0 = rnorm(1, 0, 1) ; e_m1 = rnorm(1, 0, 1)
for (i in 1:n){
if (i == 1){
Z_t[i] = mu + e_t[i] + theta1 * e_0 + theta2 * e_m1
}else if(i == 2){
Z_t[i] = mu + e_t[i] + theta1 * e_t[i-1] + theta2 * e_0
}else{
Z_t[i] = mu + e_t[i] + theta1 * e_t[i-1] + theta2 * e_t[i-2]
}
}
Z_t = ts(Z_t)
## (a)
ts.plot(Z_t)
## (b)
dl_Z_t = durbin_levinson(Z_t, K = 10)
acf(Z_t, lag.max = 10, main = "모형4 ACF")
pacf(Z_t, lag.max = 10, main = "모형4 PACF")
## (c)
### 나중에
## (d)
set.seed(7714)
n = 100 ; theta1 = -1.3 ; theta2 = 0.6 mu = 9.5
e_t = rnorm(n, 0, 1) ; Z_t = c(rep(1.0, n)) ; e_0 = rnorm(1, 0, 1) ; e_m1 = rnorm(1, 0, 1)
for (i in 1:n){
if (i == 1){
Z_t[i] = mu + e_t[i] + theta1 * e_0 + theta2 * e_m1
}else if(i == 2){
Z_t[i] = mu + e_t[i] + theta1 * e_t[i-1] + theta2 * e_0
}else{
Z_t[i] = mu + e_t[i] + theta1 * e_t[i-1] + theta2 * e_t[i-2]
}
}
Z_t = ts(Z_t)
ts.plot(Z_t)
dl_Z_t = durbin_levinson(Z_t, K = 10)
acf(Z_t, lag.max = 10, main = "모형4 ACF")
pacf(Z_t, lag.max = 10, main = "모형4 PACF")
## arima.sim 코드
set.seed(7714)
n     <- 1000
theta <- c(-1.3, 0.6)
mu    <- 9.5
z = arima.sim(n = n, model = list(order = c(0,0,2), ma = theta), rand.gen = rnorm)
Z = mu + z
ts.plot(Z)
dl_Z = durbin_levinson(Z, K = 10)
acf(Z, lag.max = 10, main = "모형4 ACF")
pacf(Z, lag.max = 10, main = "모형4 PACF")
set.seed(7714)
n = 100
phi = c(0.6)
theta = c(0.9)
mu = 38
z = arima.sim(n = n, model = list(order = c(1,0,1), ar = phi, ma = theta), rand.gen = rnorm)
Z = mu + z
## (a)
ts.plot(Z)
## (b)
dl_Z = durbin_levinson(Z, K = 10)
acf(Z, lag.max = 10, main = "모형5 ACF")
pacf(Z, lag.max = 10, main = "모형5 PACF")
## (c)
### 나중에
## (d)
set.seed(7714)
n = 1000
phi = c(0.6)
theta = c(0.9)
mu = 38
z = arima.sim(n = n, model = list(order = c(1,0,1), ar = phi, ma = theta), rand.gen = rnorm)
Z = mu + z
Z = ts(Z)
ts.plot(Z)
dl_Z = durbin_levinson(Z, K = 10)
acf(Z, lag.max = 10, main = "모형5 ACF")
pacf(Z, lag.max = 10, main = "모형5 PACF")
set.seed(7714)
n = 100
phi = c(0.4, 0.3)
# theta = c(0.9)
mu = 0
z = arima.sim(n = n, model = list(order = c(2,0,0), ar = phi), rand.gen = rnorm)
Z = mu + z
## (a)
ts.plot(Z)
## (b)
dl_Z = durbin_levinson(Z, K = 10)
acf(Z, lag.max = 10, main = "모형6 ACF")
pacf(Z, lag.max = 10, main = "모형6 PACF")
## (c)
### 나중에
## (d)
set.seed(7714)
n = 1000
phi = c(0.4, 0.3)
# theta = c(0.9)
mu = 0
z = arima.sim(n = n, model = list(order = c(2,0,0), ar = phi), rand.gen = rnorm)
Z = mu + z
Z = ts(Z)
ts.plot(Z)
dl_Z = durbin_levinson(Z, K = 10)
acf(Z, lag.max = 10, main = "모형6 ACF")
pacf(Z, lag.max = 10, main = "모형6 PACF")
set.seed(7714)
n = 100
phi = c(0.5)
theta = c(0.3)
mu = 0
z = arima.sim(n = n, model = list(order = c(1,0,1), ar = phi, ma = theta), rand.gen = rnorm)
Z = mu + z
## (a)
ts.plot(Z)
## (b)
dl_Z = durbin_levinson(Z, K = 10)
acf(Z, lag.max = 10, main = "모형7 ACF")
pacf(Z, lag.max = 10, main = "모형7 PACF")
## (c)
### 나중에
## (d)
set.seed(7714)
n = 1000
phi = c(0.5)
theta = c(0.3)
mu = 0
z = arima.sim(n = n, model = list(order = c(1,0,1), ar = phi, ma = theta), rand.gen = rnorm)
Z = mu + z
Z = ts(Z)
ts.plot(Z)
dl_Z = durbin_levinson(Z, K = 10)
acf(Z, lag.max = 10, main = "모형7 ACF")
pacf(Z, lag.max = 10, main = "모형7 PACF")
set.seed(7714)
n = 100
phi = c(1.5, -0.7)
theta = c(-0.5)
mu = 100
z = arima.sim(n = n, model = list(order = c(2,0,1), ar = phi, ma = theta), rand.gen = rnorm)
Z = mu + z
## (a)
ts.plot(Z)
## (b)
dl_Z = durbin_levinson(Z, K = 10)
acf(Z, lag.max = 10, main = "모형8 ACF")
pacf(Z, lag.max = 10, main = "모형8 PACF")
## (c)
### 나중에
## (d)
set.seed(7714)
n = 1000
phi = c(1.5, -0.7)
theta = c(-0.5)
mu = 100
z = arima.sim(n = n, model = list(order = c(2,0,1), ar = phi, ma = theta), rand.gen = rnorm)
Z = mu + z
Z = ts(Z)
ts.plot(Z)
dl_Z = durbin_levinson(Z, K = 10)
acf(Z, lag.max = 10, main = "모형8 ACF")
pacf(Z, lag.max = 10, main = "모형8 PACF")
knitr::opts_chunk$set(echo = TRUE)
glue(dataset_dir, "/depart.txt")
library(glue)
glue(dataset_dir, "/depart.txt")
ts.plot(dept, ylab = "depart", main = "그림 7- 1 백화점 월별 매출액")
## Example7.1 : 비정상 확률과정
library(glue)
z = scan(glue(dataset_dir, "/depart.txt"))
dept = ts(z, start = c(1984, 1), frequency = 12)
ldept = log(dept)
dif_1 = diff(ldept, lag = 1)
dif_12 = diff(ldept, lag = 12)
dif_112 = diff(dif_1, lag = 12) # 1차 차분을 먼저하고 나서 계절차분(주기 = 12)
ts.plot(dept, ylab = "depart", main = "그림 7-1 백화점 월별 매출액")
ts.plot(ldept, ylab = "ln depart", main = "그림 7-2 로그 매출액")
ts.plot(dif_1, ylab = "diff1", main = "그림 7-5 1차 차분된 로그 매출액") ; abline(h = 0)
ts.plot(dif_12, ylab = "diff12", main = "계절차분된 로그 매출액") ; abline(h = 0)
ts.plot(dif_112, ylab = "diff1&12", main = "그림 7-6 계절차분된 로그 매출액") ; abline(h = 0)
## Figure 7.3 : 이자율
z = scan(glue(dataset_dir, "/interest.txt"))
interest = ts(z, start = c(1982, 4), frequency = 12)
ts.plot(interest, ylab = "interest", main = "그림 7-3 이자율"); abline(v = 1992)
## Figure 7.4 : Random Walk Process
set.seed(12456)
z = ts(cumsum(rnorm(100, .01, 1)))
difz = diff(z, lag = 1)
par(mfrow = c(1,2))
# 그림 7-4
ts.plot(z, ylab = 'z', main = "Random Walk")
ts.plot(difz, ylab = 'diff z', main = "1차 차분된 Random Walk")
knitr::opts_chunk$set(echo = TRUE)
library(glue)
list.files("../adv_reg/functions")
dir = getwd() ; mother_dir = dirname(dir)
dataset_dir = glue(dir, "/datasets", sep = "")
reg_function_dir = glue(mother_dir, "/adv_reg/functions")
source(glue(reg_function_dir, "/mult_reg.R", sep = ""), echo = F)
source(glue(reg_function_dir, "/reg_diagnostics.R", sep = ""), echo = F)
tsa_function_dir = glue(mother_dir, "/tsa/functions")
source(glue(tsa_function_dir, "/exp_smt.R", sep = ""), echo = F)
source(glue(tsa_function_dir, "/acf_pacf.R", sep = ""), echo = F)
## Example7.1 : 비정상 확률과정
library(glue)
z = scan(glue(dataset_dir, "/depart.txt"))
dept = ts(z, start = c(1984, 1), frequency = 12)
ldept = log(dept)
dif_1 = diff(ldept, lag = 1)
dif_12 = diff(ldept, lag = 12)
dif_112 = diff(dif_1, lag = 12) # 1차 차분을 먼저하고 나서 계절차분(주기 = 12)
ts.plot(dept, ylab = "depart", main = "그림 7-1 백화점 월별 매출액")
ts.plot(ldept, ylab = "ln depart", main = "그림 7-2 로그 매출액")
ts.plot(dif_1, ylab = "diff1", main = "그림 7-5 1차 차분된 로그 매출액") ; abline(h = 0)
ts.plot(dif_12, ylab = "diff12", main = "계절차분된 로그 매출액")
ts.plot(dif_112, ylab = "diff1&12", main = "그림 7-6 계절차분된 로그 매출액") ; abline(h = 0)
## Figure 7.3 : 이자율
z = scan(glue(dataset_dir, "/interest.txt"))
interest = ts(z, start = c(1982, 4), frequency = 12)
ts.plot(interest, ylab = "interest", main = "그림 7-3 이자율"); abline(v = 1992)
## Figure 7.4 : Random Walk Process
set.seed(12456)
z = ts(cumsum(rnorm(100, .01, 1)))
difz = diff(z, lag = 1)
par(mfrow = c(1,2))
# 그림 7-4
ts.plot(z, ylab = 'z', main = "Random Walk")
ts.plot(difz, ylab = 'diff z', main = "1차 차분된 Random Walk")
## Figure 7.7, 7.8, 7.9, 7.10 : ARMA(1,1) 과정
set.seed(16732)
z = arima.sim(n = 300, list(order = c(1,1,1), ar = 0.8, ma = -0.5), rand.gen = rnorm)
# 그림 7-7, 7-8, 7-9, 7-10
ts.plot(z, ylab = "z",
main = (expression(ARIMA(1,1,1)~~~~~~~~phi==0.8~~theta==0.5)))
acf(z, lag.max = 24, main = "그림 7-8 ARIMA(1,1,1) 과정의 SACF")
ts.plot(diff(z), main = "그림 7-9 ARMA(1,1) 과정") ; abline(h = 0)
acf(diff(z), lag.max = 24, main = "그림 7-10 ARMA(1,1) 과정의 SACF")
## Figure 7.7, 7.8, 7.9, 7.10 : ARMA(1,1) 과정
set.seed(16732)
z = arima.sim(n = 300, list(order = c(1,1,1), ar = 0.8, ma = -0.5), rand.gen = rnorm)
# 그림 7-7, 7-8, 7-9, 7-10
ts.plot(z, ylab = "z",
main = (expression(ARIMA(1,1,1)~~~~~~~~phi==0.8~~,theta==0.5)))
acf(z, lag.max = 24, main = "그림 7-8 ARIMA(1,1,1) 과정의 SACF")
ts.plot(diff(z), main = "그림 7-9 ARMA(1,1) 과정") ; abline(h = 0)
acf(diff(z), lag.max = 24, main = "그림 7-10 ARMA(1,1) 과정의 SACF")
## Figure 7.7, 7.8, 7.9, 7.10 : ARMA(1,1) 과정
set.seed(16732)
z = arima.sim(n = 300, list(order = c(1,1,1), ar = 0.8, ma = -0.5), rand.gen = rnorm)
# 그림 7-7, 7-8, 7-9, 7-10
ts.plot(z, ylab = "z",
main = (expression(ARIMA(1,1,1)~~~~~~~~phi==0.8~~theta==0.5)))
acf(z, lag.max = 24, main = "그림 7-8 ARIMA(1,1,1) 과정의 SACF")
ts.plot(diff(z), main = "그림 7-9 ARMA(1,1) 과정") ; abline(h = 0)
acf(diff(z), lag.max = 24, main = "그림 7-10 ARMA(1,1) 과정의 SACF")
# arima.sim 대신 자료를 다음과 같이 생성할 수도 있음
set.seed(16732)
t = 1:300 ; z = rep(0, 302) ; a1 = rnorm(1)
for (i in 1:300){
a = rnorm(1)
z[i+2] = 1.8*z[i+1] - 0.8*z[i] + a - 0.5*a1
a1 = a1
}
z = z[3:302]
ts.plot(z, ylab = "z",
main = (expression(ARIMA(1,1,1)~~~~~~~~phi==0.8~~theta==0.5)))
acf(z, lag.max = 24, main = "그림 7-8 ARIMA(1,1,1) 과정의 SACF")
ts.plot(diff(z), main = "그림 7-9 ARMA(1,1) 과정") ; abline(h = 0)
acf(diff(z), lag.max = 24, main = "그림 7-10 ARMA(1,1) 과정의 SACF")
library(glue)
z = scan(glue(dataset_dir, "/depart.txt"))
dept = ts(z, start = c(1984, 1), frequency = 12)
ldept = log(dept)
diff_12 = diff(ldept, lag = 12)
ts.plot(diff_12, ylab = "diff_12", main = "계절차분된 로그 매출액")
diff_12_1 = diff(diff_12, lag = 1)
ts.plot(diff_12_1, ylab = "diff_12_1", main = "계절차분 & 1차 차분 로그 매출액")
diff_12_1 = diff(diff_12, lag = 1)
ts.plot(diff_12_1, ylab = "diff_12_1", main = "계절차분 & 1차 차분 로그 매출액") ; abline(h = 0)
diff_12_1 = diff(diff_12, lag = 1)
ts.plot(diff_12_1, ylab = "diff_12_1", main = "계절차분 & 1차 차분 로그 매출액") ; abline(h = 0)
ts.plot(dif_112, ylab = "diff1&12", main = "그림 7-6 계절차분된 로그 매출액") ; abline(h = 0)
library(glue)
z = scan(glue(dataset_dir, "/ex7_3.txt"))
ex7_3 = ts(z, start = c(1984, 1), frequency = 12)
ts.plot(ex7_3, ylab = "ex7_3", main = "모의실험 자료")
library(glue)
z = scan(glue(dataset_dir, "/ex7_3.txt"))
diff_ex7_3_1 = diff(ex7_3, lag = 1)
ts.plot(diff_ex7_3_1, ylab = "diff_ex7_3_1", main = "1차 차분된 모의실험 자료")
length(ex7_3)
library(glue)
diff_ex7_3_1 = diff(ex7_3, lag = 1)
ts.plot(diff_ex7_3_1, ylab = "diff_ex7_3_1", main = "1차 차분된 모의실험 자료")
library(glue)
diff_ex7_3_1 = diff(ex7_3, lag = 1)
ts.plot(diff_ex7_3_1, ylab = "diff_ex7_3_1", main = "1차 차분된 모의실험 자료")
diff_ex7_3_1_12 = diff(diff_ex7_3_1, lag = 12)
ts.plot(diff_ex7_3_1_12, ylab = "diff_ex7_3_1_12", main = "계절(주기=12)차분 & 1차 차분된 모의실험 자료")
library(glue)
diff_ex7_3_1 = diff(ex7_3, lag = 1)
ts.plot(diff_ex7_3_1, ylab = "diff_ex7_3_1", main = "1차 차분된 모의실험 자료")
diff_ex7_3_1_6 = diff(diff_ex7_3_1, lag = 6)
ts.plot(diff_ex7_3_1_6, ylab = "diff_ex7_3_1_6", main = "계절(주기=6)차분 & 1차 차분된 모의실험 자료")
library(glue)
diff_ex7_3_1 = diff(ex7_3, lag = 1)
ts.plot(diff_ex7_3_1, ylab = "diff_ex7_3_1", main = "1차 차분된 모의실험 자료")
diff_ex7_3_1_4 = diff(diff_ex7_3_1, lag = 4)
ts.plot(diff_ex7_3_1_4, ylab = "diff_ex7_3_1_4", main = "계절(주기=4)차분 & 1차 차분된 모의실험 자료")
library(glue)
diff_ex7_3_4 = diff(ex7_3, lag = 4)
ts.plot(diff_ex7_3_4, ylab = "diff_ex7_3_4", main = "계절(주기=4)차분된 모의실험 자료")
library(glue)
diff_ex7_3_1 = diff(ex7_3, lag = 1)
ts.plot(diff_ex7_3_1, ylab = "diff_ex7_3_1", main = "1차 차분된 모의실험 자료")
diff_ex7_3_1_4 = diff(diff_ex7_3_1, lag = 4)
ts.plot(diff_ex7_3_1_4, ylab = "diff_ex7_3_1_4", main = "계절(주기=4)차분 & 1차 차분된 모의실험 자료")
acf(diff_ex7_3_1_4)
library(glue)
diff_ex7_3_4 = diff(ex7_3, lag = 4)
ts.plot(diff_ex7_3_4, ylab = "diff_ex7_3_4", main = "계절(주기=4)차분된 모의실험 자료")
acf(diff_ex7_3_4)
library(glue)
diff_ex7_3_1 = diff(ex7_3, lag = 1)
ts.plot(diff_ex7_3_1, ylab = "diff_ex7_3_1", main = "1차 차분된 모의실험 자료")
diff_ex7_3_1_4 = diff(diff_ex7_3_1, lag = 4)
ts.plot(diff_ex7_3_1_4, ylab = "diff_ex7_3_1_4", main = "계절(주기=4)차분 & 1차 차분된 모의실험 자료")
acf(diff_ex7_3_1_4)
dl_diff_ex7_3_1_4 = durbin_levinson(diff_ex7_3_1_4, K = 10)
library(glue)
diff_ex7_3_4 = diff(ex7_3, lag = 4)
ts.plot(diff_ex7_3_4, ylab = "diff_ex7_3_4", main = "계절(주기=4)차분된 모의실험 자료")
acf(diff_ex7_3_4)
dl_diff_ex7_3_4 = durbin_levinson(diff_ex7_3_4, K = 10)
library(glue)
diff_ex7_3_4 = diff(ex7_3, lag = 4)
diff_ex7_3_4_1 = diff(diff_ex7_3_4_1, lag = 1)
ts.plot(diff_ex7_3_4_1, ylab = "diff_ex7_3_4_1", main = "1차 차분 & 계절(주기=4)차분된 모의실험 자료")
acf(diff_ex7_3_4_1)
dl_diff_ex7_3_4_1 = durbin_levinson(diff_ex7_3_4_1, K = 10)
library(glue)
diff_ex7_3_4 = diff(ex7_3, lag = 4)
diff_ex7_3_4_1 = diff(diff_ex7_3_4, lag = 1)
ts.plot(diff_ex7_3_4_1, ylab = "diff_ex7_3_4_1", main = "1차 차분 & 계절(주기=4)차분된 모의실험 자료")
acf(diff_ex7_3_4_1)
dl_diff_ex7_3_4_1 = durbin_levinson(diff_ex7_3_4_1, K = 10)
