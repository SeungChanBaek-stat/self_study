print(glue("MSR = {MSR}, MSE = {MSE}"))
print(glue("F_0 = {F_0}, F_alpha = {F_alpha}"))
return(list(XtX = XtX, Xty = Xty, beta_hat = beta_hat,
SST = SST, SSR = SSR, SSE = SSE,
MSR = MSR, MSE = MSE))
}
x0 = c(rep(1, 10))
x1 = c(4, 8, 9, 8, 8, 12, 6, 10, 6, 9)
x2 = c(4, 10, 8, 5, 10, 15, 8, 13, 5, 12)
y = c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
X = cbind(x0, x1, x2)
reg_res = mult_reg(X, y)
var_beta_hat = solve(reg_res$XtX) ; var_beta_hat
var_beta_hat_x1_10_x2_10 = t(c(1, 10, 10)) %*% var_beta_hat %*% c(1, 10, 10) ; var_beta_hat_x1_10_x2_10
# install.packages("MASS")
library(MASS)
data(Boston)
head(Boston)
fit <- lm(medv ~ rm + lstat, data = Boston)
summary(fit)
anova(fit)
vcov(fit)
select <- grepl(pattern = "rm|tax|lstat|medv", x = names(Boston))
data <- Boston[, select]
# 중회귀모형의 적합
lm.fit = lm(medv ~ rm + tax + lstat, data = data)
# 변수의 직교화절차로 적합
lm.fit_1 = lm(medv ~ rm + tax, data = data)
resid_1 = lm.fit_1$residuals
lm.fit_2 = lm(lstat ~ rm + tax, data = data)
x_2.1 = lm.fit_2$residuals
lm.fit_3 = lm(resid_1 ~ x_2.1, data = data)
lm.fit$coefficients[4] ; lm.fit_3$coefficients[2]
lm.fit$coefficients
coeff_lstat_lm.fit <- as.vector(lm.fit$coefficients[4])
coeff_lstat_lm.fit_3 <- as.vector(lm.fit_3$coefficients[2])
all.equal(coeff_lstat_lm.fit, coeff_lstat_lm.fit_3)
x_0 = c(rep(1, 14)) ; x_1 = c(3, 1, 5, 8, 1, 4, 2, 6, 9, 3, 5, 7, 2, 6)
y = c(39, 24, 115, 105, 50, 86, 67, 90, 140, 112, 70, 186, 43, 126)
X = cbind(x_0, x_1)
mult_res = mult_reg(X, y, alpha = 0.05)
mult_res$XtX
mult_res$Xty
t(y) %*% y
solve(mult_res$XtX)
# print(glue("XtX = {mult_res$XtX}, \n
#            Xty = {mult_res$Xty}, \n
#            yty = {t(y) %*% y}, \n
#            XtX_inv = {solve(mult_res$XtX)}"))
beta_hat = mult_res$beta_hat ; beta_hat
MSE = mult_res$MSE ; MSE
var_hat_beta_hat = as.numeric(MSE) * solve(mult_res$XtX) ; var_hat_beta_hat
r_squared = mult_res$SSR / mult_res$SST ; r_squared
x0 = rep(1, 8) ; x1 = c(195, 179, 205, 204, 201, 184, 210, 209) ; x2 = c(57, 61, 60, 62, 61, 54, 58, 61)
y = c(81.4, 122.2, 101.7, 175.6, 150.3, 64.8, 92.1, 113.8) ; X = cbind(x0, x1, x2)
mult_res = mult_reg(X, y)
beta_hat = mult_res$beta_hat ; beta_hat
var_beta_hat = 3 * solve(mult_res$XtX) ; var_beta_hat
x = c(1, 200, 59)
y_hat_x = t(x) %*% beta_hat ; y_hat_x
var_y_hat_x = 3 * t(x) %*% solve(mult_res$XtX) %*% x ; var_y_hat_x
r_squared = SSR/ SST ; r_squared
MSE = mult_res$MSE ; MSE
x0 = c(rep(1, 10)) ; x1 = c(10, 24, 25, 28, 15, 18, 22, 22, 12, 15)
x2 = c(27, 26, 28, 26, 30, 24, 27, 25, 27, 25) ; x3 = c(64, 72, 80, 88, 81, 45, 46, 69, 54, 39)
X = cbind(x0, x1, x2, x3)
mult_res = mult_reg(X, y, alpha = 0.05)
x0 = c(rep(1, 10)) ; x1 = c(10, 24, 25, 28, 15, 18, 22, 22, 12, 15)
x2 = c(27, 26, 28, 26, 30, 24, 27, 25, 27, 25) ; x3 = c(64, 72, 80, 88, 81, 45, 46, 69, 54, 39)
X = cbind(x0, x1, x2, x3) ; y = c(2.8, 3.9, 3.9, 4.4, 3.1, 3.1, 3.5, 3.6, 3.0, 3.3)
mult_res = mult_reg(X, y, alpha = 0.05)
x0 = c(rep(1, 10)) ; x1 = c(10, 24, 25, 28, 15, 18, 22, 22, 12, 15)
x2 = c(27, 26, 28, 26, 30, 24, 27, 25, 27, 25) ; x3 = c(64, 72, 80, 88, 81, 45, 46, 69, 54, 39)
X = cbind(x0, x1, x2, x3) ; y = c(2.8, 3.9, 3.9, 4.4, 3.1, 3.1, 3.5, 3.6, 3.0, 3.3)
mult_res = mult_reg(X, y, alpha = 0.05)
beta_hat = mult_res$beta_hat ; beta_hat
var_beta_hat = solve(mult_res$XtX) ; var_beta_hat
var_hat_beta_hat = as.numeric(mult_res$MSE) * solve(mult_res$XtX) ; var_hat_beta_hat
2.55186e-05
as.numeric(2.55186e-05)
round(2.55186e-05, 3)
round(2.55186e-05, 4)
round(2.55186e-02, 4)
round(2.55186e-02, 5)
round(2.55186e-05, 5)
r_squared = SSR / SST ; r_squared
x0 = c(rep(1, 10))
x1 = c(4, 8, 9, 8, 8, 12, 6, 10, 6, 9)
x2 = c(4, 10, 8, 5, 10, 15, 8, 13, 5, 12)
y = c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
n = length(y)
X = cbind(x0, x1, x2)
XtX = t(X) %*% X ; XtX
Xty = t(X) %*% y ; Xty
XtX_inv = solve(XtX) ; XtX_inv
beta_hat = XtX_inv %*% Xty ; beta_hat
library(glue)
one = c(rep(1,n)) ; In = diag(1, 10) ; Jn_n = one %*% t(one) / n
H = X %*% solve(t(X) %*% X) %*% t(X) ; p = dim(X)[2] - 1
SST = t(y) %*% (In - Jn_n) %*% y
SSE = t(y) %*% (In - H) %*% y
SSR = t(y) %*% (H - Jn_n) %*% y
MSR = SSR / p ; MSE = SSE/ (n - p - 1)
F_0 = MSR/MSE ; F_alpha = qf(0.05, p, n-p-1, lower.tail = FALSE)
print(glue("SST = {SST}, SSR = {SSR}, SSE = {SSE}"))
print(glue("MSR = {MSR}, MSE = {MSE}"))
print(glue("F_0 = {F_0}, F_alpha = {F_alpha}"))
class(y)
## 중회귀에서의 분산분석용 함수
mult_reg = function(X, y, alpha = 0.05){
library(glue)
# X가 행렬인지 확인
if (!is.matrix(X)) {
stop("X는 행렬이어야 합니다.")
}
# y가 숫자형 벡터 혹은 행렬인지 확인
if (!is.numeric(y)) {
stop("y는 숫자형이어야 합니다.")
}
n = length(y) ; p = dim(X)[2] - 1
one = c(rep(1,n)) ; In = diag(1, n) ; Jn_n = one %*% t(one) / n
H = X %*% solve(t(X) %*% X) %*% t(X)
XtX = t(X) %*% X ; Xty = t(X) %*% y
beta_hat = solve(XtX) %*% Xty
SST = t(y) %*% (In - Jn_n) %*% y
SSE = t(y) %*% (In - H) %*% y
SSR = t(y) %*% (H - Jn_n) %*% y
MSR = SSR / p ; MSE = SSE/ (n - p - 1)
F_0 = MSR/MSE ; F_alpha = qf(alpha, p, n-p-1, lower.tail = FALSE)
print(glue("SST = {SST}, SSR = {SSR}, SSE = {SSE}"))
print(glue("MSR = {MSR}, MSE = {MSE}"))
print(glue("F_0 = {F_0}, F_alpha = {F_alpha}"))
return(list(XtX = XtX, Xty = Xty, beta_hat = beta_hat,
SST = SST, SSR = SSR, SSE = SSE,
MSR = MSR, MSE = MSE))
}
x0 = c(rep(1, 10))
x1 = c(4, 8, 9, 8, 8, 12, 6, 10, 6, 9)
x2 = c(4, 10, 8, 5, 10, 15, 8, 13, 5, 12)
y = c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
X = cbind(x0, x1, x2)
reg_res = mult_reg(X, y)
var_beta_hat = solve(reg_res$XtX) ; var_beta_hat
var_beta_hat_x1_10_x2_10 = t(c(1, 10, 10)) %*% var_beta_hat %*% c(1, 10, 10) ; var_beta_hat_x1_10_x2_10
# install.packages("MASS")
library(MASS)
data(Boston)
head(Boston)
fit <- lm(medv ~ rm + lstat, data = Boston)
summary(fit)
anova(fit)
vcov(fit)
select <- grepl(pattern = "rm|tax|lstat|medv", x = names(Boston))
data <- Boston[, select]
# 중회귀모형의 적합
lm.fit = lm(medv ~ rm + tax + lstat, data = data)
# 변수의 직교화절차로 적합
lm.fit_1 = lm(medv ~ rm + tax, data = data)
resid_1 = lm.fit_1$residuals
lm.fit_2 = lm(lstat ~ rm + tax, data = data)
x_2.1 = lm.fit_2$residuals
lm.fit_3 = lm(resid_1 ~ x_2.1, data = data)
lm.fit$coefficients[4] ; lm.fit_3$coefficients[2]
lm.fit$coefficients
coeff_lstat_lm.fit <- as.vector(lm.fit$coefficients[4])
coeff_lstat_lm.fit_3 <- as.vector(lm.fit_3$coefficients[2])
all.equal(coeff_lstat_lm.fit, coeff_lstat_lm.fit_3)
x_0 = c(rep(1, 14)) ; x_1 = c(3, 1, 5, 8, 1, 4, 2, 6, 9, 3, 5, 7, 2, 6)
y = c(39, 24, 115, 105, 50, 86, 67, 90, 140, 112, 70, 186, 43, 126)
X = cbind(x_0, x_1)
mult_res = mult_reg(X, y, alpha = 0.05)
mult_res$XtX
mult_res$Xty
t(y) %*% y
solve(mult_res$XtX)
# print(glue("XtX = {mult_res$XtX}, \n
#            Xty = {mult_res$Xty}, \n
#            yty = {t(y) %*% y}, \n
#            XtX_inv = {solve(mult_res$XtX)}"))
beta_hat = mult_res$beta_hat ; beta_hat
MSE = mult_res$MSE ; MSE
var_hat_beta_hat = as.numeric(MSE) * solve(mult_res$XtX) ; var_hat_beta_hat
r_squared = mult_res$SSR / mult_res$SST ; r_squared
x0 = rep(1, 8) ; x1 = c(195, 179, 205, 204, 201, 184, 210, 209) ; x2 = c(57, 61, 60, 62, 61, 54, 58, 61)
y = c(81.4, 122.2, 101.7, 175.6, 150.3, 64.8, 92.1, 113.8) ; X = cbind(x0, x1, x2)
mult_res = mult_reg(X, y)
beta_hat = mult_res$beta_hat ; beta_hat
var_beta_hat = 3 * solve(mult_res$XtX) ; var_beta_hat
x = c(1, 200, 59)
y_hat_x = t(x) %*% beta_hat ; y_hat_x
var_y_hat_x = 3 * t(x) %*% solve(mult_res$XtX) %*% x ; var_y_hat_x
SSR = mult_res$SSR ; SST = mult_res$SST
r_squared = SSR/ SST ; r_squared
MSE = mult_res$MSE ; MSE
x0 = c(rep(1, 10)) ; x1 = c(10, 24, 25, 28, 15, 18, 22, 22, 12, 15)
x2 = c(27, 26, 28, 26, 30, 24, 27, 25, 27, 25) ; x3 = c(64, 72, 80, 88, 81, 45, 46, 69, 54, 39)
X = cbind(x0, x1, x2, x3) ; y = c(2.8, 3.9, 3.9, 4.4, 3.1, 3.1, 3.5, 3.6, 3.0, 3.3)
mult_res = mult_reg(X, y, alpha = 0.05)
beta_hat = mult_res$beta_hat ; beta_hat
var_beta_hat = solve(mult_res$XtX) ; var_beta_hat
var_hat_beta_hat = as.numeric(mult_res$MSE) * solve(mult_res$XtX) ; var_hat_beta_hat
round(2.55186e-05, 5)
SSR = mult_res$SSR ; SST = mult_res$SST
r_squared = SSR / SST ; r_squared
x = c(1, 20, 27, 60) ; MSE = as.numeric(mult_res$MSE)
xty_hat = t(x) %*% beta_hat ; xty_hat
var_xty_hat = MSE * t(x) %*% solve(mult_res$XtX) %*% x ; var_xty_hat
x = c(1, 20, 27, 60) ; MSE = as.numeric(mult_res$MSE)
xty_hat = t(x) %*% beta_hat ; xty_hat
var_xty_hat = MSE * t(x) %*% solve(mult_res$XtX) %*% x ; var_xty_hat
sd_xty_hat = sqrt(var_xty_hat) ; sd_xty_hat
var_ys_hat = MSE + var_xty_hat ; var_ys_hat
var_ys_hat = MSE + var_xty_hat ; var_ys_hat
sd_ys_hat = sqrt(var_ys_hat) ; sd_ys_hat
x0 = c(rep(1, 10))
x1 = c(4, 8, 9, 8, 8, 12, 6, 10, 6, 9)
x2 = c(4, 10, 8, 5, 10, 15, 8, 13, 5, 12)
y = c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
n = length(y)
X = cbind(x0, x1, x2)
XtX = t(X) %*% X ; XtX
Xty = t(X) %*% y ; Xty
XtX_inv = solve(XtX) ; XtX_inv
beta_hat = XtX_inv %*% Xty ; beta_hat
library(glue)
one = c(rep(1,n)) ; In = diag(1, 10) ; Jn_n = one %*% t(one) / n
H = X %*% solve(t(X) %*% X) %*% t(X) ; p = dim(X)[2] - 1
SST = t(y) %*% (In - Jn_n) %*% y
SSE = t(y) %*% (In - H) %*% y
SSR = t(y) %*% (H - Jn_n) %*% y
MSR = SSR / p ; MSE = SSE/ (n - p - 1)
F_0 = MSR/MSE ; F_alpha = qf(0.05, p, n-p-1, lower.tail = FALSE)
print(glue("SST = {SST}, SSR = {SSR}, SSE = {SSE}"))
print(glue("MSR = {MSR}, MSE = {MSE}"))
print(glue("F_0 = {F_0}, F_alpha = {F_alpha}"))
class(y)
## 중회귀에서의 분산분석용 함수
mult_reg = function(X, y, alpha = 0.05){
library(glue)
# X가 행렬인지 확인
if (!is.matrix(X)) {
stop("X는 행렬이어야 합니다.")
}
# y가 숫자형 벡터 혹은 행렬인지 확인
if (!is.numeric(y)) {
stop("y는 숫자형이어야 합니다.")
}
n = length(y) ; p = dim(X)[2] - 1
one = c(rep(1,n)) ; In = diag(1, n) ; Jn_n = one %*% t(one) / n
H = X %*% solve(t(X) %*% X) %*% t(X)
XtX = t(X) %*% X ; Xty = t(X) %*% y
beta_hat = solve(XtX) %*% Xty
SST = t(y) %*% (In - Jn_n) %*% y
SSE = t(y) %*% (In - H) %*% y
SSR = t(y) %*% (H - Jn_n) %*% y
MSR = SSR / p ; MSE = SSE/ (n - p - 1)
F_0 = MSR/MSE ; F_alpha = qf(alpha, p, n-p-1, lower.tail = FALSE)
print(glue("SST = {SST}, SSR = {SSR}, SSE = {SSE}"))
print(glue("MSR = {MSR}, MSE = {MSE}"))
print(glue("F_0 = {F_0}, F_alpha = {F_alpha}"))
return(list(XtX = XtX, Xty = Xty, beta_hat = beta_hat,
SST = SST, SSR = SSR, SSE = SSE,
MSR = MSR, MSE = MSE))
}
x0 = c(rep(1, 10))
x1 = c(4, 8, 9, 8, 8, 12, 6, 10, 6, 9)
x2 = c(4, 10, 8, 5, 10, 15, 8, 13, 5, 12)
y = c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
X = cbind(x0, x1, x2)
reg_res = mult_reg(X, y)
var_beta_hat = solve(reg_res$XtX) ; var_beta_hat
var_beta_hat_x1_10_x2_10 = t(c(1, 10, 10)) %*% var_beta_hat %*% c(1, 10, 10) ; var_beta_hat_x1_10_x2_10
# install.packages("MASS")
library(MASS)
data(Boston)
head(Boston)
fit <- lm(medv ~ rm + lstat, data = Boston)
summary(fit)
anova(fit)
vcov(fit)
select <- grepl(pattern = "rm|tax|lstat|medv", x = names(Boston))
data <- Boston[, select]
# 중회귀모형의 적합
lm.fit = lm(medv ~ rm + tax + lstat, data = data)
# 변수의 직교화절차로 적합
lm.fit_1 = lm(medv ~ rm + tax, data = data)
resid_1 = lm.fit_1$residuals
lm.fit_2 = lm(lstat ~ rm + tax, data = data)
x_2.1 = lm.fit_2$residuals
lm.fit_3 = lm(resid_1 ~ x_2.1, data = data)
lm.fit$coefficients[4] ; lm.fit_3$coefficients[2]
lm.fit$coefficients
coeff_lstat_lm.fit <- as.vector(lm.fit$coefficients[4])
coeff_lstat_lm.fit_3 <- as.vector(lm.fit_3$coefficients[2])
all.equal(coeff_lstat_lm.fit, coeff_lstat_lm.fit_3)
x_0 = c(rep(1, 14)) ; x_1 = c(3, 1, 5, 8, 1, 4, 2, 6, 9, 3, 5, 7, 2, 6)
y = c(39, 24, 115, 105, 50, 86, 67, 90, 140, 112, 70, 186, 43, 126)
X = cbind(x_0, x_1)
mult_res = mult_reg(X, y, alpha = 0.05)
mult_res$XtX
mult_res$Xty
t(y) %*% y
solve(mult_res$XtX)
# print(glue("XtX = {mult_res$XtX}, \n
#            Xty = {mult_res$Xty}, \n
#            yty = {t(y) %*% y}, \n
#            XtX_inv = {solve(mult_res$XtX)}"))
beta_hat = mult_res$beta_hat ; beta_hat
MSE = mult_res$MSE ; MSE
var_hat_beta_hat = as.numeric(MSE) * solve(mult_res$XtX) ; var_hat_beta_hat
r_squared = mult_res$SSR / mult_res$SST ; r_squared
x0 = rep(1, 8) ; x1 = c(195, 179, 205, 204, 201, 184, 210, 209) ; x2 = c(57, 61, 60, 62, 61, 54, 58, 61)
y = c(81.4, 122.2, 101.7, 175.6, 150.3, 64.8, 92.1, 113.8) ; X = cbind(x0, x1, x2)
mult_res = mult_reg(X, y)
beta_hat = mult_res$beta_hat ; beta_hat
var_beta_hat = 3 * solve(mult_res$XtX) ; var_beta_hat
x = c(1, 200, 59)
y_hat_x = t(x) %*% beta_hat ; y_hat_x
var_y_hat_x = 3 * t(x) %*% solve(mult_res$XtX) %*% x ; var_y_hat_x
SSR = mult_res$SSR ; SST = mult_res$SST
r_squared = SSR/ SST ; r_squared
MSE = mult_res$MSE ; MSE
x0 = c(rep(1, 10)) ; x1 = c(10, 24, 25, 28, 15, 18, 22, 22, 12, 15)
x2 = c(27, 26, 28, 26, 30, 24, 27, 25, 27, 25) ; x3 = c(64, 72, 80, 88, 81, 45, 46, 69, 54, 39)
X = cbind(x0, x1, x2, x3) ; y = c(2.8, 3.9, 3.9, 4.4, 3.1, 3.1, 3.5, 3.6, 3.0, 3.3)
mult_res = mult_reg(X, y, alpha = 0.05)
beta_hat = mult_res$beta_hat ; beta_hat
var_beta_hat = solve(mult_res$XtX) ; var_beta_hat
var_hat_beta_hat = as.numeric(mult_res$MSE) * solve(mult_res$XtX) ; var_hat_beta_hat
round(2.55186e-05, 5)
SSR = mult_res$SSR ; SST = mult_res$SST
r_squared = SSR / SST ; r_squared
x = c(1, 20, 27, 60) ; MSE = as.numeric(mult_res$MSE)
xty_hat = t(x) %*% beta_hat ; xty_hat
var_xty_hat = MSE * t(x) %*% solve(mult_res$XtX) %*% x ; var_xty_hat
sd_xty_hat = sqrt(var_xty_hat) ; sd_xty_hat
var_ys_hat = MSE + var_xty_hat ; var_ys_hat
sd_ys_hat = sqrt(var_ys_hat) ; sd_ys_hat
lm.fit_1 = lm(y ~ x1 + x2) ; coef(lm.fit_1)
lm.fit_2 = lm(y ~ x1 + x3)
lm.fit_3 = lm(y ~ x2 + x3)
lm.fit_1 = lm(y ~ x1 + x2) ; coef(lm.fit_1) ; anova(lm.fit_1)
lm.fit_2 = lm(y ~ x1 + x3)
lm.fit_3 = lm(y ~ x2 + x3)
lm.fit_1 = lm(y ~ x1 + x2) ; coef(lm.fit_1) ; summary(lm.fit_1)
lm.fit_2 = lm(y ~ x1 + x3)
lm.fit_3 = lm(y ~ x2 + x3)
lm.fit_1 = lm(y ~ x1 + x2) ; coef(lm.fit_1) ; fit_1_R = summary(lm.fit_1)
lm.fit_2 = lm(y ~ x1 + x3)
lm.fit_3 = lm(y ~ x2 + x3)
lm.fit_1 = lm(y ~ x1 + x2) ; coef(lm.fit_1) ; fit_1_R = summary(lm.fit_1) ; fit_1_R$r.squared
lm.fit_2 = lm(y ~ x1 + x3) ; coef(lm.fit_2) ; fit_2_R = summary(lm.fit_2) ; fit_2_R$r.squared
lm.fit_3 = lm(y ~ x2 + x3) ; coef(lm.fit_3) ; fit_3_R = summary(lm.fit_3) ; fit_3_R$r.squared
lm.fit_1 = lm(y ~ x1 + x2) ; coef(lm.fit_1) ; fit_1_R = summary(lm.fit_1) ; fit_1_R$r.squared
lm.fit_2 = lm(y ~ x1 + x3) ; coef(lm.fit_2) ; fit_2_R = summary(lm.fit_2) ; fit_2_R$r.squared
lm.fit_3 = lm(y ~ x2 + x3) ; coef(lm.fit_3) ; fit_3_R = summary(lm.fit_3) ; fit_3_R$r.squared
lm.fit = lm(y ~ x1 + x2 + x3) ; coef(lm.fit) ; fit_R = summary(lm.fit) ; fit_R$r.squared
X
X[,2:4]
X_.1 = X[,2:4] ; y = y
mult_res = mult_reg(X_.1, y)
x0 = c(rep(1, 10))
x1 = c(4, 8, 9, 8, 8, 12, 6, 10, 6, 9)
x2 = c(4, 10, 8, 5, 10, 15, 8, 13, 5, 12)
y = c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
n = length(y)
X = cbind(x0, x1, x2)
XtX = t(X) %*% X ; XtX
Xty = t(X) %*% y ; Xty
XtX_inv = solve(XtX) ; XtX_inv
beta_hat = XtX_inv %*% Xty ; beta_hat
library(glue)
one = c(rep(1,n)) ; In = diag(1, 10) ; Jn_n = one %*% t(one) / n
H = X %*% solve(t(X) %*% X) %*% t(X) ; p = dim(X)[2] - 1
SST = t(y) %*% (In - Jn_n) %*% y
SSE = t(y) %*% (In - H) %*% y
SSR = t(y) %*% (H - Jn_n) %*% y
MSR = SSR / p ; MSE = SSE/ (n - p - 1)
F_0 = MSR/MSE ; F_alpha = qf(0.05, p, n-p-1, lower.tail = FALSE)
print(glue("SST = {SST}, SSR = {SSR}, SSE = {SSE}"))
print(glue("MSR = {MSR}, MSE = {MSE}"))
print(glue("F_0 = {F_0}, F_alpha = {F_alpha}"))
class(y)
## 중회귀에서의 분산분석용 함수
mult_reg = function(X, y, alpha = 0.05, coeff = TRUE){
library(glue)
# X가 행렬인지 확인
if (!is.matrix(X)) {
stop("X는 행렬이어야 합니다.")
}
# y가 숫자형 벡터 혹은 행렬인지 확인
if (!is.numeric(y)) {
stop("y는 숫자형이어야 합니다.")
}
if (coeff == TRUE){
n = length(y) ; p = dim(X)[2] - 1
one = c(rep(1,n)) ; In = diag(1, n) ; Jn_n = one %*% t(one) / n
H = X %*% solve(t(X) %*% X) %*% t(X)
XtX = t(X) %*% X ; Xty = t(X) %*% y
beta_hat = solve(XtX) %*% Xty
SST = t(y) %*% (In - Jn_n) %*% y
SSE = t(y) %*% (In - H) %*% y
SSR = t(y) %*% (H - Jn_n) %*% y
MSR = SSR / p ; MSE = SSE/ (n - p - 1)
F_0 = MSR/MSE ; F_alpha = qf(alpha, p, n-p-1, lower.tail = FALSE)
}else{
n = length(y) ; p = dim(X)[2]
In = diag(1, n)
H = X %*% solve(t(X) %*% X) %*% t(X)
XtX = t(X) %*% X ; Xty = t(X) %*% y
beta_hat = solve(XtX) %*% Xty
SST = t(y) %*% (In) %*% y
SSE = t(y) %*% (In - H) %*% y
SSR = t(y) %*% (H) %*% y
MSR = SSR / p ; MSE = SSE/ (n - p)
F_0 = MSR/MSE ; F_alpha = qf(alpha, p, n-p, lower.tail = FALSE)
}
print(glue("SST = {SST}, SSR = {SSR}, SSE = {SSE}"))
print(glue("MSR = {MSR}, MSE = {MSE}"))
print(glue("F_0 = {F_0}, F_alpha = {F_alpha}"))
return(list(XtX = XtX, Xty = Xty, beta_hat = beta_hat,
SST = SST, SSR = SSR, SSE = SSE,
MSR = MSR, MSE = MSE))
}
x0 = c(rep(1, 10))
x1 = c(4, 8, 9, 8, 8, 12, 6, 10, 6, 9)
x2 = c(4, 10, 8, 5, 10, 15, 8, 13, 5, 12)
y = c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
X = cbind(x0, x1, x2)
reg_res = mult_reg(X, y)
var_beta_hat = solve(reg_res$XtX) ; var_beta_hat
var_beta_hat_x1_10_x2_10 = t(c(1, 10, 10)) %*% var_beta_hat %*% c(1, 10, 10) ; var_beta_hat_x1_10_x2_10
# install.packages("MASS")
library(MASS)
data(Boston)
head(Boston)
fit <- lm(medv ~ rm + lstat, data = Boston)
summary(fit)
anova(fit)
vcov(fit)
select <- grepl(pattern = "rm|tax|lstat|medv", x = names(Boston))
data <- Boston[, select]
# 중회귀모형의 적합
lm.fit = lm(medv ~ rm + tax + lstat, data = data)
# 변수의 직교화절차로 적합
lm.fit_1 = lm(medv ~ rm + tax, data = data)
resid_1 = lm.fit_1$residuals
lm.fit_2 = lm(lstat ~ rm + tax, data = data)
x_2.1 = lm.fit_2$residuals
lm.fit_3 = lm(resid_1 ~ x_2.1, data = data)
lm.fit$coefficients[4] ; lm.fit_3$coefficients[2]
lm.fit$coefficients
coeff_lstat_lm.fit <- as.vector(lm.fit$coefficients[4])
coeff_lstat_lm.fit_3 <- as.vector(lm.fit_3$coefficients[2])
all.equal(coeff_lstat_lm.fit, coeff_lstat_lm.fit_3)
x_0 = c(rep(1, 14)) ; x_1 = c(3, 1, 5, 8, 1, 4, 2, 6, 9, 3, 5, 7, 2, 6)
y = c(39, 24, 115, 105, 50, 86, 67, 90, 140, 112, 70, 186, 43, 126)
X = cbind(x_0, x_1)
mult_res = mult_reg(X, y, alpha = 0.05)
mult_res$XtX
mult_res$Xty
t(y) %*% y
solve(mult_res$XtX)
# print(glue("XtX = {mult_res$XtX}, \n
#            Xty = {mult_res$Xty}, \n
#            yty = {t(y) %*% y}, \n
#            XtX_inv = {solve(mult_res$XtX)}"))
beta_hat = mult_res$beta_hat ; beta_hat
MSE = mult_res$MSE ; MSE
var_hat_beta_hat = as.numeric(MSE) * solve(mult_res$XtX) ; var_hat_beta_hat
r_squared = mult_res$SSR / mult_res$SST ; r_squared
x0 = rep(1, 8) ; x1 = c(195, 179, 205, 204, 201, 184, 210, 209) ; x2 = c(57, 61, 60, 62, 61, 54, 58, 61)
y = c(81.4, 122.2, 101.7, 175.6, 150.3, 64.8, 92.1, 113.8) ; X = cbind(x0, x1, x2)
mult_res = mult_reg(X, y)
beta_hat = mult_res$beta_hat ; beta_hat
var_beta_hat = 3 * solve(mult_res$XtX) ; var_beta_hat
x = c(1, 200, 59)
y_hat_x = t(x) %*% beta_hat ; y_hat_x
var_y_hat_x = 3 * t(x) %*% solve(mult_res$XtX) %*% x ; var_y_hat_x
SSR = mult_res$SSR ; SST = mult_res$SST
r_squared = SSR/ SST ; r_squared
MSE = mult_res$MSE ; MSE
x0 = c(rep(1, 10)) ; x1 = c(10, 24, 25, 28, 15, 18, 22, 22, 12, 15)
x2 = c(27, 26, 28, 26, 30, 24, 27, 25, 27, 25) ; x3 = c(64, 72, 80, 88, 81, 45, 46, 69, 54, 39)
X = cbind(x0, x1, x2, x3) ; y = c(2.8, 3.9, 3.9, 4.4, 3.1, 3.1, 3.5, 3.6, 3.0, 3.3)
mult_res = mult_reg(X, y, alpha = 0.05)
beta_hat = mult_res$beta_hat ; beta_hat
var_beta_hat = solve(mult_res$XtX) ; var_beta_hat
var_hat_beta_hat = as.numeric(mult_res$MSE) * solve(mult_res$XtX) ; var_hat_beta_hat
round(2.55186e-05, 5)
SSR = mult_res$SSR ; SST = mult_res$SST
r_squared = SSR / SST ; r_squared
x = c(1, 20, 27, 60) ; MSE = as.numeric(mult_res$MSE)
xty_hat = t(x) %*% beta_hat ; xty_hat
var_xty_hat = MSE * t(x) %*% solve(mult_res$XtX) %*% x ; var_xty_hat
sd_xty_hat = sqrt(var_xty_hat) ; sd_xty_hat
var_ys_hat = MSE + var_xty_hat ; var_ys_hat
sd_ys_hat = sqrt(var_ys_hat) ; sd_ys_hat
lm.fit_1 = lm(y ~ x1 + x2) ; coef(lm.fit_1) ; fit_1_R = summary(lm.fit_1) ; fit_1_R$r.squared
lm.fit_2 = lm(y ~ x1 + x3) ; coef(lm.fit_2) ; fit_2_R = summary(lm.fit_2) ; fit_2_R$r.squared
lm.fit_3 = lm(y ~ x2 + x3) ; coef(lm.fit_3) ; fit_3_R = summary(lm.fit_3) ; fit_3_R$r.squared
lm.fit = lm(y ~ x1 + x2 + x3) ; coef(lm.fit) ; fit_R = summary(lm.fit) ; fit_R$r.squared
X_.1 = X[,2:4] ; y = y
mult_res = mult_reg(X_.1, y, coeff = FALSE)
?lm
X_.1 = X[,2:4] ; y = y
mult_res = mult_reg(X_.1, y, coeff = FALSE)
lm_0.fit = lm(y ~ x1 + x2 + x3 + 0) ; summary(lm_0.fit)
X_.1 = X[,2:4] ; y = y
mult_res = mult_reg(X_.1, y, coeff = FALSE)
R2 = mult_res$SSR / mult_res$SST ; R2
lm_0.fit = lm(y ~ x1 + x2 + x3 + 0) ; summary(lm_0.fit)
