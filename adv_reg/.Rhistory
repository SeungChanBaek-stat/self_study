knitr::opts_chunk$set(echo = TRUE)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_0 ; beta_1
# 최소제곱추정량에 의한 풀이
beta = solve(t(X)%*%X) %*% t(X) %*% y
beta
plot(x, y)
plot(x1, y)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
plot(x1, y)
abline(beta_normal)
plot(x1, y)
abline(beta_normal, col = "red", lwd = 2)
plot(x1, y, main = "산점도 및 회귀선", xlab = "x1", ylab = "y")
abline(beta_normal, col = "red", lwd = 2)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
plot(x1, y, main = "산점도 및 회귀선", xlab = "x1", ylab = "y")
abline(beta_normal, col = "red", lwd = 2)
plot(x1, y, main = "산점도 및 회귀선", xlab = "x1", ylab = "y")
abline(beta_normal, col = "red", lwd = 2)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
plot(x1, y)
abline(beta_normal)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
plot(x1, y, main = "산점도 및 회귀선", xlab = "x1", ylab = "y")
abline(beta_normal, col = "red", lwd = 2)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
plot(x1, y, main = "산점도 및 회귀선", xlab = "광고료", ylab = "판매액")
abline(beta_normal, col = "red", lwd = 2)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
# 두가지 풀이 비교
beta_normal ; beta_lse
#plot(x1, y, main = "산점도 및 회귀선", xlab = "광고료", ylab = "판매액")
#abline(beta_normal, col = "red", lwd = 2)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
# 두가지 풀이 비교
beta_normal ; beta_lse # -2.269565  2.608696, -2.269565   2.608696 으로 동일하다
plot(x1, y, main = "산점도 및 회귀선", col = "blue", xlab = "광고료", ylab = "판매액")
abline(beta_normal, col = "red", lwd = 2)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
# 두가지 풀이 비교
beta_normal ; beta_lse # -2.269565  2.608696, -2.269565   2.608696 으로 동일하다
plot(x1, y, main = "산점도 및 회귀선", col = "blue", pch = 10, xlab = "광고료", ylab = "판매액")
abline(beta_normal, col = "red", lwd = 2)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
# 두가지 풀이 비교
beta_normal ; beta_lse # -2.269565  2.608696, -2.269565   2.608696 으로 동일하다
plot(x1, y, main = "산점도 및 회귀선", col = "blue", pch = 10, lwd = 2, xlab = "광고료", ylab = "판매액")
abline(beta_normal, col = "red", lwd = 2)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
# 두가지 풀이 비교
beta_normal ; beta_lse # -2.269565  2.608696, -2.269565   2.608696 으로 동일하다
plot(x1, y, main = "산점도 및 회귀선", col = "blue", pch = 5, lwd = 2, xlab = "광고료", ylab = "판매액")
abline(beta_normal, col = "red", lwd = 2)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
# 두가지 풀이 비교
beta_normal ; beta_lse # -2.269565  2.608696, -2.269565   2.608696 으로 동일하다
plot(x1, y, main = "산점도 및 회귀선", col = "blue", pch = 5, lwd = 2,
xlab = "광고료", ylab = "판매액")
abline(beta_normal, col = "red", lwd = 2)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ length(x1) ; y_mean = sum(y) / length(y)
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
# 두가지 풀이 비교
beta_normal ; beta_lse # -2.269565  2.608696, -2.269565   2.608696 으로 동일하다
plot(x1, y, main = "산점도 및 회귀선", col = "blue", pch = 5, lwd = 2,
xlab = "광고료", ylab = "판매액")
abline(beta_normal, col = "red", lwd = 2)
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
n <- length(x1)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ n ; y_mean = sum(y) / n
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
# 두가지 풀이 비교
beta_normal ; beta_lse # -2.269565  2.608696, -2.269565   2.608696 으로 동일하다
plot(x1, y, main = "산점도 및 회귀선", col = "blue", pch = 5, lwd = 2,
xlab = "광고료", ylab = "판매액")
abline(beta_normal, col = "red", lwd = 2)
beta_normal[1]
beta_normal[2]
y_hat = beta_normal[1] * x0 + beta_normal[2] * x1 ; y_hat
y_hat = beta_normal[1] * x0 + beta_normal[2] * x1 ; y_hat
s_yx_squared = sum((y - y_hat)^{2}) / (n-2) ; s_yx_squared
s_yx = sqrt(s_yx_squared) ; s_yx
y_hat = beta_normal[1] * x0 + beta_normal[2] * x1 ; y_hat
SST = (sum(y-y_mean))^{2} ; SSE = (sum(y-y_hat))^{2} ; SST = (sum(y_hat - y_mean))^{2}
r_squared = SST / SSR ; r_squared
y_hat = beta_normal[1] * x0 + beta_normal[2] * x1 ; y_hat
SST = (sum(y-y_mean))^{2} ; SSE = (sum(y-y_hat))^{2} ; SSR = (sum(y_hat - y_mean))^{2}
r_squared = SST / SSR ; r_squared
y_hat = beta_normal[1] * x0 + beta_normal[2] * x1 ; y_hat
SST = (sum(y-y_mean))^{2} ; SSE = (sum(y-y_hat))^{2} ; SSR = (sum(y_hat - y_mean))^{2}
r_squared = SSR / SST ; r_squared
y_hat = beta_normal[1] * x0 + beta_normal[2] * x1 ; y_hat
SST = (sum(y-y_mean))^{2} ; SSE = (sum(y-y_hat))^{2} ; SSR = (sum(y_hat - y_mean))^{2}
SST ; SSE ; SSR
r_squared = SSR / SST ; r_squared
x0 <- c(rep(1, 10)); x1 <- c(4,8,9,8,8,12,6,10,6,9)
X <- cbind(x0, x1); y <- c(9, 20, 22, 15, 17, 30, 18, 25, 10, 20)
n <- length(x1)
# 정규방정식에 의한 풀이
x_mean = sum(x1)/ n ; y_mean = sum(y) / n
S_xy = sum((x1-x_mean)*(y-y_mean)) ; S_xx = sum((x1-x_mean)^{2})
beta_1 = S_xy / S_xx ; beta_0 = y_mean - beta_1 * x_mean
beta_normal = c(beta_0, beta_1)
# 최소제곱추정량에 의한 풀이
beta_lse = solve(t(X)%*%X) %*% t(X) %*% y
# 두가지 풀이 비교
beta_normal ; beta_lse # -2.269565  2.608696, -2.269565   2.608696 으로 동일하다
plot(x1, y, main = "산점도 및 회귀선", col = "blue", pch = 5, lwd = 2,
xlab = "광고료", ylab = "판매액")
abline(beta_normal, col = "red", lwd = 2)
y_hat = beta_normal[1] * x0 + beta_normal[2] * x1 ; y_hat
s_yx_squared = sum((y - y_hat)^{2}) / (n-2) ; s_yx_squared
s_yx = sqrt(s_yx_squared) ; s_yx
y_hat
y_hat = beta_normal[1] * x0 + beta_normal[2] * x1 ; y_hat
y_hat
SST = (sum(y-y_mean))^{2} ; SSE = (sum(y-y_hat))^{2} ; SSR = (sum(y_hat - y_mean))^{2}
SST ; SSE ; SSR
r_squared = SSR / SST ; r_squared
y_hat = beta_normal[1] * x0 + beta_normal[2] * x1 ; y_hat
SST = sum((y - y_mean)^{2}) ; SSE = sum((y-y_hat)^{2}) ; SSR = sum((y_hat - y_mean)^{2})
SST ; SSE ; SSR
r_squared = SSR / SST ; r_squared
S_xx = sum((x1 - x_mean)^{2})
S_yy = sum((y - y_mean)^{2})
S_xy = sum((x1 - x_mean) * (y - y_mean))
r_squared = S_xy / (S_xx * S_yy) ; r_squared
S_xx = sum((x1 - x_mean)^{2}) ; S_xx
S_yy = sum((y - y_mean)^{2}) ; S_yy
S_xy = sum((x1 - x_mean) * (y - y_mean)) S_xy
S_xx = sum((x1 - x_mean)^{2}) ; S_xx
S_yy = sum((y - y_mean)^{2}) ; S_yy
S_xy = sum((x1 - x_mean) * (y - y_mean)) ; S_xy
r_squared = S_xy / (S_xx * S_yy) ; r_squared
S_xx = sum((x1 - x_mean)^{2}) ; S_xx
S_yy = sum((y - y_mean)^{2}) ; S_yy
S_xy = sum((x1 - x_mean) * (y - y_mean)) ; S_xy
r_squared = (S_xy)^{2} / (S_xx * S_yy) ; r_squared
S_xx = sum((x1 - x_mean)^{2}) ; S_xx
S_yy = sum((y - y_mean)^{2}) ; S_yy
S_xy = sum((x1 - x_mean) * (y - y_mean)) ; S_xy
r_squared = (S_xy)^{2} / (S_xx * S_yy) ; r_squared
r = sqrt(r_squared) ; r
S_xx = sum((x1 - x_mean)^{2}) ; S_xx
S_yy = sum((y - y_mean)^{2}) ; S_yy
S_xy = sum((x1 - x_mean) * (y - y_mean)) ; S_xy
r_squared = (S_xy)^{2} / (S_xx * S_yy) ; r_squared
r = S_xy / sqrt(S_xx * S_yy) ; r
S_xx = sum((x1 - x_mean)^{2}) ; S_xx
S_yy = sum((y - y_mean)^{2}) ; S_yy
S_xy = sum((x1 - x_mean) * (y - y_mean)) ; S_xy
r_squared = SSR/SST ; r_squared
r = S_xy / sqrt(S_xx * S_yy) ; r
S_xx = sum((x1 - x_mean)^{2}) ; S_xx
S_yy = sum((y - y_mean)^{2}) ; S_yy
S_xy = sum((x1 - x_mean) * (y - y_mean)) ; S_xy
r_squared = SSR/SST ; r_squared
r = S_xy / sqrt(S_xx * S_yy) ; r ; r^{2}
SSE = sum((y - y_hat)^{2}) ; SSR = sum((y_hat - y_mean)^{2})
df_SSE = n - 2 ; df_SSR = 1
MSR = SSR / df_SSR ; MSE = SSE / df_SSE
F_0 = MSR / MSE ; F_0
F_alpha = qf(0.05, df_SSR, df_SSE, lower.tail = FALSE) ; F_alpha
knitr::opts_chunk$set(echo = TRUE)
y_mean = sum(y) / n ; x_mean = sum(x_1) / n
x_0 = c(rep(1, 14)) ; x_1 = c(3, 1, 5, 8, 1, 4, 2, 6, 9, 3, 5, 7, 2, 6)
y = c(39, 24, 115, 105, 50, 86, 67, 90, 140, 112, 70, 186, 43, 126)
n = length(x_0) ; X = cbind(x_0, x_1)
plot(x_1, y, pch = 19, cex = 0.7,
xlab = "사용연도 X (단위 : 년)", ylab = "정비비용 Y (단위 : 1,000원원)")
y_mean = sum(y) / n ; x_mean = sum(x_1) / n
S_xx = sum((x_1 - x_mean)^{2})
S_xy = sum((x_1 - x_mean) * (y - y_mean))
S_yy = sum((y - y_mean)^{2})
beta_1_hat = S_xy / S_xx ; beta_0_hat = y_mean - beta_1_hat * x_mean
beta_0_hat ; beta_1_hat
beta_hat = solve(t(X) %*% X) %*% t(X) %*% y ; beta_hat
y_hat = beta_0_hat * x_0 + beta_1_hat * x_1 ; y_hat ; y
y_hat = beta_0_hat * x_0 + beta_1_hat * x_1
s_yx_squared = sum((y - y_hat)^{2}) / (n-2)
s_yx = sqrt(s_yx_squared) ; s_yx
x_0 = c(rep(1, 14)) ; x_1 = c(3, 1, 5, 8, 1, 4, 2, 6, 9, 3, 5, 7, 2, 6)
y = c(39, 24, 115, 105, 50, 86, 67, 90, 140, 112, 70, 186, 43, 126)
n = length(x_0) ; X = cbind(x_0, x_1)
plot(x_1, y, pch = 19, cex = 0.7,
xlab = "사용연도 X (단위 : 년)", ylab = "정비비용 Y (단위 : 1,000원원)")
plot(x_1, y, pch = 19, cex = 0.7,
xlab = "사용연도 X (단위 : 년)", ylab = "정비비용 Y (단위 : 1,000원원)")
y_mean = sum(y) / n ; x_mean = sum(x_1) / n
S_xx = sum((x_1 - x_mean)^{2})
S_xy = sum((x_1 - x_mean) * (y - y_mean))
S_yy = sum((y - y_mean)^{2})
beta_1_hat = S_xy / S_xx ; beta_0_hat = y_mean - beta_1_hat * x_mean
beta_0_hat ; beta_1_hat
beta_hat = solve(t(X) %*% X) %*% t(X) %*% y ; beta_hat
y_hat = beta_0_hat * x_0 + beta_1_hat * x_1
s_yx_squared = sum((y - y_hat)^{2}) / (n-2) ; s_yx_squared
s_yx = sqrt(s_yx_squared) ; s_yx
SST = sum((y - y_mean)^{2}) ; SSE = sum((y - y_hat)^{2}) ; SSR = SST - SSE
r_squared = SSR / SST ; r_squared
r = sqrt(r_squared) ; r
print(f"SST = {SST}")
print(fr"SST = {SST}")
install.packages(glue)
install.packages("glue")
# install.packages("glue")
library(glue)
print(glue"SST = {SST}")
print(glue("SST = {SST}"))
print(glue("SST = {SST}, SSR = {SSR}, SSE = {SSE}"))
remove.packages("glue")
install.packages("glue")
remove.packages("glue")
install.packages("glue")
knitr::opts_chunk$set(echo = TRUE)
# remove.packages("glue")
# install.packages("glue")
library(glue)
y_mean = sum(y) / n ; x_mean = sum(x_1) / n
S_xx = sum((x_1 - x_mean)^{2})
S_xy = sum((x_1 - x_mean) * (y - y_mean))
S_yy = sum((y - y_mean)^{2})
beta_1_hat = S_xy / S_xx ; beta_0_hat = y_mean - beta_1_hat * x_mean
beta_0_hat ; beta_1_hat
beta_hat = solve(t(X) %*% X) %*% t(X) %*% y ; beta_hat
y_hat = beta_0_hat * x_0 + beta_1_hat * x_1
s_yx_squared = sum((y - y_hat)^{2}) / (n-2) ; s_yx_squared
s_yx = sqrt(s_yx_squared) ; s_yx
SST = sum((y - y_mean)^{2}) ; SSE = sum((y - y_hat)^{2}) ; SSR = SST - SSE
r_squared = SSR / SST ; r_squared
r = sqrt(r_squared) ; r
# remove.packages("glue")
# install.packages("glue")
library(glue)
df_SSR = 2 ; df_SSE = n - 2 ; MSR = SSR / df_SSR ; MSE = SSE /df_SSE
print(glue("SST = {SST}, SSR = {SSR}, SSE = {SSE}"))
print(glue())
# remove.packages("glue")
# install.packages("glue")
library(glue)
df_SSR = 2 ; df_SSE = n - 2 ; MSR = SSR / df_SSR ; MSE = SSE /df_SSE
F_0 = MSR / MSE ; F_alpha = qf(0.05, df_SSR, df_SSE, lower.tail = FALSE)
print(glue("SST = {SST}, SSR = {SSR}, SSE = {SSE}"))
print(glue("MSR = {MSR}, MSE = {MSE}, F_0 = {F_0}, F_alpha = {F_alpha}"))
# remove.packages("glue")
# install.packages("glue")
library(glue)
df_SSR = 1 ; df_SSE = n - 2 ; MSR = SSR / df_SSR ; MSE = SSE /df_SSE
F_0 = MSR / MSE ; F_alpha = qf(0.05, df_SSR, df_SSE, lower.tail = FALSE)
print(glue("SST = {SST}, SSR = {SSR}, SSE = {SSE}"))
print(glue("MSR = {MSR}, MSE = {MSE}, F_0 = {F_0}, F_alpha = {F_alpha}"))
y_hat.4 = beta_0_hat + beta_1_hat * 4 ; y_hat.4
e = y - y_hat ; e_sum = sum(y - y_hat) ; e_sum
e = y - y_hat ; e
e_sum = sum(y - y_hat) ; e_sum
x_e_sum = sum(x_1 * e) ; x_e_sum
y_hat_e_sum = sum(y_hat * e) ; y_hat_e_sum
xbar = x_mean ; ybar = y_mean ;
s_x_squared = sum((x - xbar)^{2}) / (n-1) ; s_y_squared = sum((y - ybar)^{2}) / (n-1)
xbar = x_mean ; ybar = y_mean ;
s_x_squared = sum((x_1 - xbar)^{2}) / (n-1) ; s_y_squared = sum((y - ybar)^{2}) / (n-1)
s_x = sqrt(s_x_squared) ; s_y = sqrt(s_y_squared)
x_centered =(x - xbar) / s_x ; y_centered = (y - ybar) / s_y
xbar = x_mean ; ybar = y_mean ;
s_x_squared = sum((x_1 - xbar)^{2}) / (n-1) ; s_y_squared = sum((y - ybar)^{2}) / (n-1)
s_x = sqrt(s_x_squared) ; s_y = sqrt(s_y_squared)
x_centered =(x_1 - xbar) / s_x ; y_centered = (y - ybar) / s_y
beta_1_hat_centered = sum((x_centered) * (y_centered)) / sum((x_centered)^{2})
beta_1_hat_centered ; r
# beta_0_hat_centered = mean(y_centered) -
x_0 = c(rep(1, 9)) ; x_1 = c(0.9, 1.3, 2.1, 2.5, 2.4, 1.7, 0.7, 1.2, 1.6)
y = c(2.0, 2.6, 4.3, 5.8, 5.1, 3.2, 1.8, 2.3, 3.0)
n = length(x_1) ; xbar = sum(x_1) / n ; ybar = sum(y) / n
S_xx = sum((x_1 - xbar)^{2}) ; S_xy = sum((x_1 - xbar)*(y - ybar))
S_yy = sum((y - ybar)^{2})
beta_1_hat = S_xy / S_xx ; beta_0_hat = ybar - beta_1_hat * xbar
print(glue(beta_0_hat = {beta_0_hat}, beta_1_hat = {beta_1_hat}))
library(glue)
x_0 = c(rep(1, 9)) ; x_1 = c(0.9, 1.3, 2.1, 2.5, 2.4, 1.7, 0.7, 1.2, 1.6)
y = c(2.0, 2.6, 4.3, 5.8, 5.1, 3.2, 1.8, 2.3, 3.0)
n = length(x_1) ; xbar = sum(x_1) / n ; ybar = sum(y) / n
S_xx = sum((x_1 - xbar)^{2}) ; S_xy = sum((x_1 - xbar)*(y - ybar))
S_yy = sum((y - ybar)^{2})
beta_1_hat = S_xy / S_xx ; beta_0_hat = ybar - beta_1_hat * xbar
print(glue(beta_0_hat = {beta_0_hat}, beta_1_hat = {beta_1_hat}))
print(glue("beta_0_hat = {beta_0_hat}, beta_1_hat = {beta_1_hat}"))
library(glue)
x_0 = c(rep(1, 9)) ; x_1 = c(0.9, 1.3, 2.1, 2.5, 2.4, 1.7, 0.7, 1.2, 1.6)
y = c(2.0, 2.6, 4.3, 5.8, 5.1, 3.2, 1.8, 2.3, 3.0)
n = length(x_1) ; xbar = sum(x_1) / n ; ybar = sum(y) / n
S_xx = sum((x_1 - xbar)^{2}) ; S_xy = sum((x_1 - xbar)*(y - ybar))
S_yy = sum((y - ybar)^{2})
beta_1_hat = S_xy / S_xx ; beta_0_hat = ybar - beta_1_hat * xbar
print(glue("beta_0_hat = {beta_0_hat}, beta_1_hat = {beta_1_hat}"))
library(glue)
x_0 = c(rep(1, 9)) ; x_1 = c(0.9, 1.3, 2.1, 2.5, 2.4, 1.7, 0.7, 1.2, 1.6)
y = c(2.0, 2.6, 4.3, 5.8, 5.1, 3.2, 1.8, 2.3, 3.0)
n = length(x_1) ; xbar = sum(x_1) / n ; ybar = sum(y) / n
S_xx = sum((x_1 - xbar)^{2}) ; S_xy = sum((x_1 - xbar)*(y - ybar))
S_yy = sum((y - ybar)^{2})
beta_1_hat = S_xy / S_xx ; beta_0_hat = ybar - beta_1_hat * xbar
beta_hat = c(beta_0_hat, beta_1_hat)
print(glue("beta_0_hat = {beta_0_hat}, beta_1_hat = {beta_1_hat}"))
plot(x_1, y, pch = 19, cex = 0.7,
xlab = "무게 X (단위 : 1,000kg)", ylab = "에너지 소모량 Y (단위 : 1,000Btu)" )
abline(coef = beta_hat, lwd = 2, col = 'blue')
library(glue)
x_0 = c(rep(1, 9)) ; x_1 = c(0.9, 1.3, 2.1, 2.5, 2.4, 1.7, 0.7, 1.2, 1.6)
y = c(2.0, 2.6, 4.3, 5.8, 5.1, 3.2, 1.8, 2.3, 3.0) ; X = cbind(x_0, x_1)
n = length(x_1) ; xbar = sum(x_1) / n ; ybar = sum(y) / n
S_xx = sum((x_1 - xbar)^{2}) ; S_xy = sum((x_1 - xbar)*(y - ybar))
S_yy = sum((y - ybar)^{2})
beta_1_hat = S_xy / S_xx ; beta_0_hat = ybar - beta_1_hat * xbar
beta_hat = c(beta_0_hat, beta_1_hat)
print(glue("beta_0_hat = {beta_0_hat}, beta_1_hat = {beta_1_hat}"))
plot(x_1, y, pch = 19, cex = 0.7,
xlab = "무게 X (단위 : 1,000kg)", ylab = "에너지 소모량 Y (단위 : 1,000Btu)" )
abline(coef = beta_hat, lwd = 2, col = 'blue')
y_hat = X %*% beta_hat ; y_hat
y_hat_test = beta_0_hat * x_0 + beta_1_hat * x_1 ; y_hat_test
SST = sum((y-ybar)^{2}) ; SSE
y_hat = X %*% beta_hat ; y_hat
# y_hat_test = beta_0_hat * x_0 + beta_1_hat * x_1 ; y_hat_test
SST = sum((y-ybar)^{2}) ; SSE = sum((y-y_hat)^{2}) ; SSR = SST - SSE
print(glue("SST = {SST}, SSE = {SSE}, SSR = {SSR}"))
df_SSR = 1 ; df_SSE = n - 2
y_hat = X %*% beta_hat ; y_hat
# y_hat_test = beta_0_hat * x_0 + beta_1_hat * x_1 ; y_hat_test
SST = sum((y-ybar)^{2}) ; SSE = sum((y-y_hat)^{2}) ; SSR = SST - SSE
print(glue("SST = {SST}, SSE = {SSE}, SSR = {SSR}"))
df_SSR = 1 ; df_SSE = n - 2 ; MSR = SSR/df_SSR ; MSE = SSE/df_SSE
F_0 = MSR/MSE ; F_alpha = qf(0.05, df_SSR, df_SSE, lower.tail = FALSE)
print(glue("MSR = {MSR}, MSE = {MSE}, F_0 = {F_0}, F_alpha = {F_alpha}"))
y_hat_3000 = c(1, 3000) %*% beta_hat ; y_hat_3000
y_hat_1000 = c(1, 1000) %*% beta_hat ; y_hat_1000
ratio = y_hat_3000 / y_hat_1000 ; ratio
beta_1_hat_origin = sum(x_1 * y) / sum((x_1)^{2}) ; beta_1_hat_origin
beta_1_hat_origin = sum((x_1 * y)) / sum((x_1)^{2}) ; beta_1_hat_origin
beta_1_hat_origin = sum((x_1 * y)) / sum((x_1)*(x_1)) ; beta_1_hat_origin
beta_1_hat_origin = sum(x_1 * y) / sum((x_1)^{2}) ; beta_1_hat_origin
SST_origin = SST ; SSR_origin = sum((y_hat)^{2})
r_squared_origin = SSR_origin / SST_origin ; r_squared_origin
y_hat_origin = x_1 * beta_1_hat_origin
SST_origin = SST ; SSR_origin = sum((y_hat_origin)^{2})
r_squared_origin = SSR_origin / SST_origin ; r_squared_origin
y_hat_origin = x_1 * beta_1_hat_origin
SST_origin = sum((y)^{2}) ; SSR_origin = sum((y_hat_origin)^{2})
r_squared_origin = SSR_origin / SST_origin ; r_squared_origin
w = 1/(x_1)^{2} ; w
w = 1/(x_1)^{2} ; xbar_w = sum(w * x_1) / sum(w) ; ybar_w = sum(w * y) / sum(w)
beta_1_hat_w = sum(w * (x_1 - xbar_w) * (y - ybar_w)) / sum(w * (x_1 - xbar_w)^{2})
beta_0_hat_w = ybar_W - beta_1_hat_w * xbar_w
w = 1/(x_1)^{2} ; xbar_w = sum(w * x_1) / sum(w) ; ybar_w = sum(w * y) / sum(w)
beta_1_hat_w = sum(w * (x_1 - xbar_w) * (y - ybar_w)) / sum(w * (x_1 - xbar_w)^{2})
beta_0_hat_w = ybar_w - beta_1_hat_w * xbar_w
print(glue("가중회귀직선 : y_hat = {beta_0_hat_w} + {beta_1_hat_w} x"))
w = 1/(x_1)^{2} ; xbar_w = sum(w * x_1) / sum(w) ; ybar_w = sum(w * y) / sum(w)
beta_1_hat_w = sum(w * (x_1 - xbar_w) * (y - ybar_w)) / sum(w * (x_1 - xbar_w)^{2})
beta_0_hat_w = ybar_w - beta_1_hat_w * xbar_w
print(glue("가중회귀직선 : y_hat_w = {beta_0_hat_w} + {beta_1_hat_w} x"))
beta_hat_w = c(beta_0_hat_w, beta_1_hat_w)
y_hat_w = X %*% beta_hat_w
SSR_w = sum((y_hat_w - ybar)^{2}) ; SSR_w
16*13 - 9 * 15
beta_1_hat = 9/16 ; beta_0_hat = 73/16
SSR = 810/16 ; SSE = 83.2 - SSR ; SSR ; SSE
beta_1_hat = 9/16 ; beta_0_hat = 73/16
SSR = 810/16 ; SSE = 83.2 - SSR ; SSR ; SSE
MSR = SSR/1 ; MSE = SSE/18 ; MSR ; MSE
beta_1_hat = 9/16 ; beta_0_hat = 73/16
SSR = 810/16 ; SSE = 83.2 - SSR ; SSR ; SSE
MSR = SSR/1 ; MSE = SSE/18 ; MSR ; MSE
F_0 = MSR / MSE ; F_alpha = qf(0.05, 1, 18, lower.tail = FALSE) ; F_0 ; F_alpha
r = 90 / sqrt(160 * 83.2) ; r
